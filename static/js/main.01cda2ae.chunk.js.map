{"version":3,"sources":["KanbanBoard.js","App.js","reportWebVitals.js","index.js"],"names":["KanbanBoard","_useState","useState","_useState2","_slicedToArray","tickets","setTickets","_useState3","localStorage","getItem","_useState4","groupBy","setGroupBy","_useState5","_useState6","users","setUsers","useEffect","axios","get","then","response","data","console","error","catch","statusColors","Todo","In progress","Backlog","userGroups","priorityLabels","4","3","2","1","0","priorityGroups","forEach","ticket","userId","priority","push","renderUserName","user","find","id","name","React","createElement","className","htmlFor","value","onChange","event","newGroupBy","target","setItem","Fragment","Object","keys","map","key","style","backgroundColor","status","title","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.01cda2ae.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst KanbanBoard = () => {\r\n    const [tickets, setTickets] = useState([]);\r\n    const [groupBy, setGroupBy] = useState(localStorage.getItem('kanbanGroupBy') || 'status'); // Default to 'status'\r\n    const [users, setUsers] = useState([]);\r\n  \r\n    useEffect(() => {\r\n        axios.get('https://api.quicksell.co/v1/internal/frontend-assignment')\r\n          .then(response => {\r\n            if (response.data && response.data.tickets && response.data.users) {\r\n              setTickets(response.data.tickets);\r\n              setUsers(response.data.users);\r\n            } else {\r\n              console.error('Invalid API response format');\r\n            }\r\n          })\r\n          .catch(error => console.error('Error fetching data:', error));\r\n      }, []);\r\n    \r\n  const statusColors = {\r\n    'Todo': '#c8e6c9', // Pastel Green\r\n    'In progress': '#ffe0b2', // Pastel Orange\r\n    'Backlog': '#b3e0ff' // Pastel Blue\r\n  };\r\n\r\n  const userGroups = {};\r\n  const priorityLabels = {\r\n    4: 'Urgent',\r\n    3: 'High',\r\n    2: 'Medium',\r\n    1: 'Low',\r\n    0: 'No priority'\r\n  };\r\n  const priorityGroups = {};\r\n  \r\n  tickets.forEach(ticket => {\r\n    const userId = ticket.userId;\r\n    const priority = ticket.priority;\r\n    \r\n    if (!userGroups[userId]) {\r\n      userGroups[userId] = [];\r\n    }\r\n    userGroups[userId].push(ticket);\r\n\r\n    if (!priorityGroups[priority]) {\r\n      priorityGroups[priority] = [];\r\n    }\r\n    priorityGroups[priority].push(ticket);\r\n  });\r\n\r\n  const handleGroupChange = event => {\r\n    const newGroupBy = event.target.value;\r\n    setGroupBy(newGroupBy);\r\n    localStorage.setItem('kanbanGroupBy', newGroupBy);\r\n  };\r\n\r\n  const renderUserName = userId => {\r\n    const user = users.find(user => user.id === userId);\r\n    return user ? user.name : 'Unknown User';\r\n  };\r\n\r\n  const renderContent = () => {\r\n    if (groupBy === 'users') {\r\n        return (\r\n            <>\r\n              {Object.keys(userGroups).map(userId => (\r\n                <div key={userId} className=\"status-group\">\r\n                  <h2 className=\"status-heading\">{renderUserName(userId)}</h2>\r\n                  {userGroups[userId].map(ticket => (\r\n                    <div\r\n                      key={ticket.id}\r\n                      className=\"ticket\"\r\n                      style={{ backgroundColor: statusColors[ticket.status] }}\r\n                    >\r\n                      <h3>{ticket.title}</h3>\r\n                      <p>User: {renderUserName(ticket.userId)}</p>\r\n                      <p>Priority: {ticket.priority}</p>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </>\r\n          );\r\n    } else if (groupBy === 'priority') {\r\n      return (\r\n        <>\r\n          {Object.keys(priorityGroups).map(priority => (\r\n            <div key={priority} className=\"status-group\">\r\n              <h2 className=\"status-heading\" style={{ backgroundColor: statusColors['Todo'] }}>\r\n                Priority: {priorityLabels[priority]}\r\n              </h2>\r\n              {priorityGroups[priority].map(ticket => (\r\n                <div\r\n                  key={ticket.id}\r\n                  className=\"ticket\"\r\n                  style={{ backgroundColor: statusColors[ticket.status] }}\r\n                >\r\n                  <h3>{ticket.title}</h3>\r\n                  <p>User: {renderUserName(ticket.userId)}</p>\r\n                  <p>Priority: {priorityLabels[ticket.priority]}</p>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </>\r\n      );\r\n    } else {\r\n      return (\r\n        <>\r\n          {Object.keys(statusColors).map(status => (\r\n            <div key={status} className=\"status-group\">\r\n              <h2 className=\"status-heading\" style={{ backgroundColor: statusColors[status] }}>\r\n                {status}\r\n              </h2>\r\n              {tickets.map(ticket => (\r\n                ticket.status === status && (\r\n                  <div\r\n                    key={ticket.id}\r\n                    className=\"ticket\"\r\n                    style={{ backgroundColor: statusColors[ticket.status] }}\r\n                  >\r\n                    <h3>{ticket.title}</h3>\r\n                    <p>User: {renderUserName(ticket.userId)}</p>\r\n                    <p>Priority: {ticket.priority}</p>\r\n                  </div>\r\n                )\r\n              ))}\r\n            </div>\r\n          ))}\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"kanban-heading\">Kanban Board</h1>\r\n      <div className=\"group-select\">\r\n        <label htmlFor=\"groupSelect\">Group By: </label>\r\n        <select id=\"groupSelect\" value={groupBy} onChange={handleGroupChange}>\r\n          <option value=\"status\">Status</option>\r\n          <option value=\"users\">Users</option>\r\n          <option value=\"priority\">Priority</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"kanban-board\">\r\n        {renderContent()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default KanbanBoard;","// import React, { useState, useEffect } from 'react';\n// import './App.css';\n// import { fetchTickets } from './api';\n// import TicketCard from './TicketCard';\n// import GroupingOptions from './GroupingOptions';\n// import SortingOptions from './SortingOptions';\n\n// function App() {\n//   const [tickets, setTickets] = useState([]);\n//   const [grouping, setGrouping] = useState('status');\n//   const [sorting, setSorting] = useState('priority');\n\n\n//   useEffect(() => {\n//     const storedViewState = JSON.parse(localStorage.getItem('viewState'));\n//     if (storedViewState) {\n//       setGrouping(storedViewState.grouping);\n//       setSorting(storedViewState.sorting);\n//     }\n//   }, []);\n\n//   useEffect(() => {\n//     console.log(\"Fetching tickets...\");\n//     fetchTickets()\n//       .then(data => {\n//         console.log(\"Fetched tickets:\", data);\n//         setTickets(data);\n//       })\n//       .catch(error => console.error(\"Error fetching tickets:\", error));\n//   }, []);\n\n//   useEffect(() => {\n//     const viewState = { grouping, sorting };\n//     localStorage.setItem('viewState', JSON.stringify(viewState));\n//   }, [grouping, sorting]);\n\n//   // Add these console.log statements to track the data\n//   const groupedTickets = groupTickets(tickets, grouping);\n//   console.log(\"groupedTickets:\", groupedTickets);\n\n//   const sortedTickets = sortTickets(groupedTickets, sorting);\n//   console.log(\"sortedTickets:\", sortedTickets);\n\n//   return (\n//     <div className=\"kanban-board\">\n//       <h1>Kanban Board</h1>\n//       <GroupingOptions grouping={grouping} onGroupChange={setGrouping} />\n//       <SortingOptions sorting={sorting} onSortChange={setSorting} />\n//       <div className=\"ticket-list\">\n//         {Object.values(sortedTickets).map(group => (\n//           group.map(ticket => (\n//             <TicketCard key={ticket.id} ticket={ticket} />\n//           ))\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// // Function to group tickets based on grouping option\n// function groupTickets(tickets, grouping) {\n//   if (grouping === 'status') {\n//     const groupedByStatus = tickets.reduce((groups, ticket) => {\n//       const status = ticket.status;\n//       if (!groups[status]) {\n//         groups[status] = [];\n//       }\n//       groups[status].push(ticket);\n//       return groups;\n//     }, {});\n//     return groupedByStatus;\n//   } else if (grouping === 'user') {\n//     const groupedByUser = tickets.reduce((groups, ticket) => {\n//       const user = ticket.user;\n//       if (!groups[user]) {\n//         groups[user] = [];\n//       }\n//       groups[user].push(ticket);\n//       return groups;\n//     }, {});\n//     return groupedByUser;\n//   } else if (grouping === 'priority') {\n//     const groupedByPriority = tickets.reduce((groups, ticket) => {\n//       const priority = ticket.priority;\n//       if (!groups[priority]) {\n//         groups[priority] = [];\n//       }\n//       groups[priority].push(ticket);\n//       return groups;\n//     }, {});\n//     return groupedByPriority;\n//   }\n//   return tickets;\n// }\n\n// // Function to sort tickets based on sorting option\n// function sortTickets(tickets, sorting) {\n//   if (sorting === 'priority') {\n//     const sortedByPriority = [...tickets].sort((a, b) => b.priority - a.priority);\n//     return sortedByPriority;\n//   } else if (sorting === 'title') {\n//     const sortedByTitle = [...tickets].sort((a, b) => a.title.localeCompare(b.title));\n//     return sortedByTitle;\n//   }\n//   return tickets;\n// }\n\n// }\n\n\n// export default App;\n\n\nimport React from 'react';\nimport './styles.css';\nimport KanbanBoard from './KanbanBoard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <KanbanBoard />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}